
const indices = [0,
      1,
      2,
      0,
      2,
      3, // front
      4,
      5,
      6,
      4,
      6,
      7, // back
      8,
      9,
      10,
      8,
      10,
      11, // top
      12,
      13,
      14,
      12,
      14,
      15, // bottom
      16,
      17,
      18,
      16,
      18,
      19, // right
      20,
      21,
      22,
      20,
      22,
23, ];
const vertex = [
      // left column front
      0,   0,  0,
      0, 150,  0,
      30,   0,  0,
      0, 150,  0,
      30, 150,  0,
      30,   0,  0,

      // top rung front
      30,   0,  0,
      30,  30,  0,
      100,   0,  0,
      30,  30,  0,
      100,  30,  0,
      100,   0,  0,

      // middle rung front
      30,  60,  0,
      30,  90,  0,
      67,  60,  0,
      30,  90,  0,
      67,  90,  0,
      67,  60,  0,

      // left column back
        0,   0,  30,
       30,   0,  30,
        0, 150,  30,
        0, 150,  30,
       30,   0,  30,
       30, 150,  30,

      // top rung back
       30,   0,  30,
      100,   0,  30,
       30,  30,  30,
       30,  30,  30,
      100,   0,  30,
      100,  30,  30,

      // middle rung back
       30,  60,  30,
       67,  60,  30,
       30,  90,  30,
       30,  90,  30,
       67,  60,  30,
       67,  90,  30,

      // top
        0,   0,   0,
      100,   0,   0,
      100,   0,  30,
        0,   0,   0,
      100,   0,  30,
        0,   0,  30,

      // top rung right
      100,   0,   0,
      100,  30,   0,
      100,  30,  30,
      100,   0,   0,
      100,  30,  30,
      100,   0,  30,

      // under top rung
      30,   30,   0,
      30,   30,  30,
      100,  30,  30,
      30,   30,   0,
      100,  30,  30,
      100,  30,   0,

      // between top rung and middle
      30,   30,   0,
      30,   60,  30,
      30,   30,  30,
      30,   30,   0,
      30,   60,   0,
      30,   60,  30,

      // top of middle rung
      30,   60,   0,
      67,   60,  30,
      30,   60,  30,
      30,   60,   0,
      67,   60,   0,
      67,   60,  30,

      // right of middle rung
      67,   60,   0,
      67,   90,  30,
      67,   60,  30,
      67,   60,   0,
      67,   90,   0,
      67,   90,  30,

      // bottom of middle rung.
      30,   90,   0,
      30,   90,  30,
      67,   90,  30,
      30,   90,   0,
      67,   90,  30,
      67,   90,   0,

      // right of bottom
      30,   90,   0,
      30,  150,  30,
      30,   90,  30,
      30,   90,   0,
      30,  150,   0,
      30,  150,  30,

      // bottom
      0,   150,   0,
      0,   150,  30,
      30,  150,  30,
      0,   150,   0,
      30,  150,  30,
      30,  150,   0,

      // left side
      0,   0,   0,
      0,   0,  30,
      0, 150,  30,
      0,   0,   0,
      0, 150,  30,
      0, 150,   0]
const colors = [
      // left column front
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      
      // top rung front
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      
      // middle rung front
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      255, 70, 120, 255,
      
      // left column back
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      
      // top rung back
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      
      // middle rung back
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      80, 70, 200, 255,
      
      // top
      70, 200, 210, 255,
      70, 200, 210, 255,
      70, 200, 210, 255,
      70, 200, 210, 255,
      70, 200, 210, 255,
      70, 200, 210, 255,
      
      // top rung right
      200, 200, 70, 255,
      200, 200, 70, 255,
      200, 200, 70, 255,
      200, 200, 70, 255,
      200, 200, 70, 255,
      200, 200, 70, 255,
      
      // under top rung
      210, 100, 70, 255,
      210, 100, 70, 255,
      210, 100, 70, 255,
      210, 100, 70, 255,
      210, 100, 70, 255,
      210, 100, 70, 255,
      
      // between top rung and middle
      210, 160, 70, 255,
      210, 160, 70, 255,
      210, 160, 70, 255,
      210, 160, 70, 255,
      210, 160, 70, 255,
      210, 160, 70, 255,
      
      // top of middle rung
      70, 180, 210, 255,
      70, 180, 210, 255,
      70, 180, 210, 255,
      70, 180, 210, 255,
      70, 180, 210, 255,
      70, 180, 210, 255,
      
      // right of middle rung
      100, 70, 210, 255,
      100, 70, 210, 255,
      100, 70, 210, 255,
      100, 70, 210, 255,
      100, 70, 210, 255,
      100, 70, 210, 255,
      
      // bottom of middle rung.
      76, 210, 100, 255,
      76, 210, 100, 255,
      76, 210, 100, 255,
      76, 210, 100, 255,
      76, 210, 100, 255,
      76, 210, 100, 255,
      
      // right of bottom
      140, 210, 80, 255,
      140, 210, 80, 255,
      140, 210, 80, 255,
      140, 210, 80, 255,
      140, 210, 80, 255,
      140, 210, 80, 255,
      
      // bottom
      90, 130, 110, 255,
      90, 130, 110, 255,
      90, 130, 110, 255,
      90, 130, 110, 255,
      90, 130, 110, 255,
      90, 130, 110, 255,
      
      // left side
      160, 160, 220, 255,
      160, 160, 220, 255,
      160, 160, 220, 255,
      160, 160, 220, 255,
      160, 160, 220, 255,
      160, 160, 220, 255,
      
]
const vertices = [
      
    -0.5, -0.5,   -0.5,
    0.5, -0.5,   -0.5,
   -0.5,  0.5,   -10,
   0.5,  0.5,   -10,
]
const texture = [
      1, 1,
      0, 1,
      1, 0,
      0, 0,
     
]
const indices = [

      2, 1, 3,
      0, 1, 2,
]

2 1 0 0
0 0 2 1
0 -1 0 0
0 0 0 -1


0 2 1
-1 0 0
0 0 -1

0 0
0 -1

0

-1 0
0 -1

1

-1 0
0 0

0

0 2 1
0 0 0
0 0 -1

0 0 
0 -1

0

0 0
0 -1

0

0 0
0 0

0

0 0 1
0 -1 0
0 0 -1

-1 0
0 -1

1

0 0
0 -1

0

0 -1
0 0

0

0 0 2
0 -1 0
0 0 0

-1 0
0 0

0

0 0
0 0

0

0 -1
0 0

0

[
      [ 1, 1, 0, 0 ], 
      [ 0, 0, 2, 1 ], 
      [ 0, -1, 0, 0 ], 
      [ 1, 0, 0, -1 ] 
 ]

[ 
      [ 1, 1, 0, 0 ], 
      [ 0, 0, 2, 1 ], 
      [ 0, 0, 0, 0 ], 
      [ 1, 1, 0, -1 ] ]
[ 
      [ 1, 1, 1, 0 ], 
      [ 0, 0, 0, 1 ], 
      [ 0, 0, 0, 0 ], 
      [ 1, 1, 1, -1 ] ]

[ 
      [ 1, 1, 1, 1 ], 
      [ 0, 0, 0, 0 ], 
      [ 0, 0, 0, 0 ], 
      [ 1, 1, 1, 1 ] ]

      [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0] (15) 
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0] (15) 
      [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0] (15) 
      [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0] (15) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]


      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0] (16) 
      [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0] (16) 
      [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0] (16) 
      [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0] (16) 
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]



            /*`
                  attribute vec3 a_position;
                  attribute vec2 a_text_coord;

                  varying vec2 v_text_coord;

                  uniform mat4 u_rotation;

                  uniform mat4 u_translation;

                  uniform mat4 u_scale;

                  uniform mat4 u_perspective;

                  uniform mat4 u_camera;

                  void main() {
                        v_text_coord = a_text_coord;
                        gl_Position = u_perspective * u_camera * u_translation * u_rotation * u_scale * vec4(a_position, 1.0);
                  }
            `;*/

            `
                  precision mediump float;

                  varying vec2 v_text_coord;

                  uniform sampler2D u_texture;

                  void main() {
                        gl_FragColor = texture2D(u_texture, v_text_coord);
                  }
            `;
            `
                  attribute vec3 a_position;
                  attribute vec4 a_color;

                  varying vec4 v_color;

                  uniform mat4 u_rotation;

                  uniform mat4 u_translation;

                  uniform mat4 u_scale;

                  uniform mat4 u_perspective;

                  uniform mat4 u_camera;

                  void main() {
                        v_color = a_color;
                        gl_Position = u_perspective * u_camera * u_translation * u_rotation * u_scale * vec4(a_position, 1.0);
                  }
            `;
            `
                  precision mediump float;

                  varying vec4 v_color;

                  void main() {
                        gl_FragColor = v_color;
                  }
            `;



            getDrawElementFunction(vertices: number[], colors: number[], indices?: number[]): DrawFunction | null{
            const vSourceCode = new WebGLShaders(WebGLShaders.VERTEX)
            .addAttribute('a_position', WebGLShaders.VEC3)
            .addAttribute('a_color', WebGLShaders.VEC4)
            .addVarying('v_color', WebGLShaders.VEC4)
            .addUniform('u_transform', WebGLShaders.MAT4)
            .addUniform('u_perspective', WebGLShaders.MAT4)
            .addCode('v_color = a_color;')
            .setReturnedValue('u_perspective * u_transform * vec4(a_position, 1.0)')
            .get();
            
            const fSourceCode = new WebGLShaders(WebGLShaders.FRAGMENT)
            .addVarying('v_color', WebGLShaders.VEC4)
            .setReturnedValue('v_color')
            .get();

            /**
             * function to fill index buffer in case it is undefined
             */
            const fillIndexBuffer = (indices: number[] | undefined)=>{
                  indices = [];
                  for(let i = 0; i < vertices.length/3; i++) {
                        indices[i] = i;
                  }
                  return indices;
            };


            const program = this.createProgram(vSourceCode, fSourceCode);
            if(!program) return null;

            const vertexBuffer = this.createBuffer(new Float32Array(vertices), this.gl.ARRAY_BUFFER, 'a_position');
            if(!vertexBuffer) return null;

            const colorBuffer = this.createBuffer(new Float32Array(colors), this.gl.ARRAY_BUFFER, 'a_color', 4);
            if(!colorBuffer) return null; 

            this.getAttribLocations([
                  colorBuffer,
                  vertexBuffer,
            ], program);

            const transform = this.createUniform('u_transform');

            const perspective = this.createUniform('u_perspective');

            this.getUniformLocation([
                  transform,
                  perspective,
            ], program);

            if(!indices) indices = fillIndexBuffer(indices);
            const indicesBuffer = this.createBuffer(new Uint16Array(indices), this.gl.ELEMENT_ARRAY_BUFFER);
            if(!indicesBuffer) return null;

            return (opt?: DrawOpt)=>{

                  this.gl.useProgram(program);

                  this.bindBuffers([
                        vertexBuffer,
                        colorBuffer,
                  ]);

                  this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);

                  transform.value = this.setTransformationMatrix(opt);

                  perspective.value = this.perspectiveMatrix;

                  this.bindUniformMatrices4x4([
                        transform,
                        perspective,
                  ]);

                  this.gl.drawElements(this.gl.TRIANGLES, indicesBuffer.data.length, this.gl.UNSIGNED_SHORT, 0)
            }
      }
      getDrawElementWithTextureFunction(image: HTMLImageElement,vertices: number[], textureCoords: number[], indices?: number[]): DrawFunction | null {
            const vSourceCode = new WebGLShaders(WebGLShaders.VERTEX)
            .addAttribute('a_position', WebGLShaders.VEC3)
            .addAttribute('a_text_coord', WebGLShaders.VEC2)
            .addVarying('v_text_coord', WebGLShaders.VEC2)
            .addUniform('u_transform', WebGLShaders.MAT4)
            .addUniform('u_perspective', WebGLShaders.MAT4)
            .addCode('v_text_coord = a_text_coord;')
            .setReturnedValue('u_perspective * u_transform * vec4(a_position, 1.0)')
            .get();

            const fSourceCode = new WebGLShaders(WebGLShaders.FRAGMENT)
            .addVarying('v_text_coord', WebGLShaders.VEC2)
            .addUniform('u_texture', WebGLShaders.SAMPLER2D)
            .setReturnedValue('texture2D(u_texture, v_text_coord)')
            .get();
            /**
            * function to fill index buffer in case it is undefined
            */
            const fillIndexBuffer = (indices: number[] | undefined)=>{
                  indices = [];
                  for(let i = 0; i < vertices.length/3; i++) {
                        indices[i] = i;
                  }
                  return indices;
            };


            const program = this.createProgram(vSourceCode, fSourceCode);
            if(!program) return null;

            const vertexBuffer = this.createBuffer(new Float32Array(vertices), this.gl.ARRAY_BUFFER, 'a_position');
            if(!vertexBuffer) return null;

            const textureBuffer = this.createBuffer(new Float32Array(textureCoords), this.gl.ARRAY_BUFFER, 'a_text_coord', 2);
            if(!textureBuffer) return null; 

            this.getAttribLocations([
                  textureBuffer,
                  vertexBuffer,
            ], program);

            const transform = this.createUniform('u_transform');

            const perspective = this.createUniform('u_perspective');

            const texture = this.createUniform('u_texture');

            this.getUniformLocation([
                  transform,
                  perspective,
                  texture,
            ], program);

            this.createTexture(image);

            if(!indices) indices = fillIndexBuffer(indices);
            const indicesBuffer = this.createBuffer(new Uint16Array(indices), this.gl.ELEMENT_ARRAY_BUFFER);
            if(!indicesBuffer) return null;

            return (opt?: DrawOpt)=>{

                  this.gl.useProgram(program);

                  this.bindBuffers([
                        vertexBuffer,
                        textureBuffer,
                  ]);

                  this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);

                  transform.value = this.setTransformationMatrix(opt);

                  perspective.value = this.perspectiveMatrix;

                  this.bindUniformMatrices4x4([
                        transform,
                        perspective,
                  ]);
                  
                  this.gl.uniform1i(texture.location, 0);

                  this.gl.drawElements(this.gl.TRIANGLES, indicesBuffer.data.length, this.gl.UNSIGNED_SHORT, 0)
            }
      }

      const color = [
      0.0, 0.0, 0.0, 1.0, // Front face: white
      0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 1.0,

      1.0, 0.0, 0.0, 1.0, // Back face: red
      1.0, 0.0, 0.0, 1.0,
      1.0, 0.0, 0.0, 1.0,
      1.0, 0.0, 0.0, 1.0,

      0.0, 1.0, 0.0, 1.0, // Top face: green
      0.0, 1.0, 0.0, 1.0,
      0.0, 1.0, 0.0, 1.0,
      0.0, 1.0, 0.0, 1.0,

      0.0, 0.0, 1.0, 1.0, // Bottom face: blue
      0.0, 0.0, 1.0, 1.0,
      0.0, 0.0, 1.0, 1.0,
      0.0, 0.0, 1.0, 1.0,

      1.0, 1.0, 0.0, 1.0, // Right face: yellow
      1.0, 1.0, 0.0, 1.0,
      1.0, 1.0, 0.0, 1.0,
      1.0, 1.0, 0.0, 1.0,

      1.0, 0.0, 1.0, 1.0, 
      1.0, 0.0, 1.0, 1.0, 
      1.0, 0.0, 1.0, 1.0, 
      1.0, 0.0, 1.0, 1.0, 
]
const vertices = [
      // Front face
 -1.0, -1.0, 1.0, 
 1.0, -1.0, 1.0, 
 1.0, 1.0, 1.0, 
 -1.0, 1.0, 1.0,

 // Back face
 -1.0, -1.0, -1.0, 
 -1.0, 1.0, -1.0, 
 1.0, 1.0, -1.0, 
 1.0, -1.0, -1.0,

 // Top face
 -1.0, 1.0, -1.0, 
 -1.0, 1.0, 1.0, 
 1.0, 1.0, 1.0, 
 1.0, 1.0, -1.0,

 // Bottom face
 -1.0, -1.0, -1.0, 
 1.0, -1.0, -1.0,
  1.0, -1.0, 1.0, 
  -1.0, -1.0, 1.0,

 // Right face
 1.0, -1.0, -1.0, 
 1.0, 1.0, -1.0, 
 1.0, 1.0, 1.0, 
 1.0, -1.0, 1.0,

 // Left face
 -1.0, -1.0, -1.0, 
 -1.0, -1.0, 1.0, 
 -1.0, 1.0, 1.0, 
 -1.0, 1.0, -1.0,
];
const indices = [0,
      1,
      2,
      0,
      2,
      3, // front
      4,
      5,
      6,
      4,
      6,
      7, // back
      8,
      9,
      10,
      8,
      10,
      11, // top
      12,
      13,
      14,
      12,
      14,
      15, // bottom
      16,
      17,
      18,
      16,
      18,
      19, // right
      20,
      21,
      22,
      20,
      22,
23, ];
const texture = [
      // Front face

      1, 1,
      0, 1,
      0, 0,
      1, 0,

      1, 1,
      0, 1,
      0, 0,
      1, 0,

      1, 1,
      0, 1,
      0, 0,
      1, 0,

      1, 1,
      0, 1,
      0, 0,
      1, 0,

      1, 1,
      0, 1,
      0, 0,
      1, 0,

      1, 1,
      0, 1,
      0, 0,
      1, 0,
      
      1, 1,
      0, 1,
      0, 0,
      1, 0,
]
async function main(){
      const cvs = document.getElementById('gl') as HTMLCanvasElement;
      console.log(cvs);
      if(!cvs) return;
      const renderer = new GLRenderer(cvs.getContext('webgl'));
      const camera = new Camera();
      const map = new Map();
      map.set('ArrowUp', ()=>camera.y += 1);
      map.set('ArrowDown', ()=>camera.y -= 1);
      map.set('ArrowLeft', ()=>camera.x -= 1);
      map.set('ArrowRight', ()=>camera.x += 1);
      window.addEventListener('keydown', (e)=> {
            if(map.has(e.code))
                  map.get(e.code)()
      })
      const img = await Load.image('icon.webp');
      const draw = renderer.getDrawFunction({
            image: img,
            vertices: vertices,
            textureCoords: texture,
            indices: indices
     });
      const draw2 = renderer.getDrawFunction({
            vertices: vertices,
            color: color,
            indices: indices
      });
      renderer.enableCulling()
      let i = 0;
      function anim(){
            i += 0.01;
            if(draw)
                  draw({camera: camera, translation: {x: 0, y: 0, z: -10},});
            if(draw2) {
                  draw2({camera: camera, translation: {x: 0, y: 0, z: -10},});
            }
            requestAnimationFrame(anim);
      }
      anim();
}
main();


{
                        rotationMatrix: Matrix.composeMatrix(
                              Matrix.rotation(i, GLRenderer.axis.X, false),
                              4,
                              Matrix.composeMatrix(
                                    Matrix.rotation(i, GLRenderer.axis.Y, false),
                                    4,
                                    Matrix.rotation(i, GLRenderer.axis.Z, false)
                              )
                        )
                  }